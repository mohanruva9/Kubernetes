# installing kubernetes as per kubernetes documentation (legacy version)

all the steps to be exec. in all nodes

# chmod u+x filename.sh ./filename.sh 
# diable swap
sudo swapoff -a 
sudo sed -i '/ swap / s/^/#/' /etc/fstab
sudo modprobe overlay 
sudo modprobe br_netfilter
#Setup required sysctl params, these persist across reboots 
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf 
net.bridge.bridge-nf-call-iptables =1 
net.ipv4.ip_forward = 1 
net.bridge.bridge-nf-call-ip6tables = 1 
EOF
# Apply sysctl params without reboot 
sudo sysctl --system
sudo apt-get update && sudo apt-get upgrade -y 

sudo apt-get -y install containerd
sudo mkdir -p /etc/containerd 
containerd config default | sudo tee /etc/containerd/config.toml
vim /etc/containerd/config.toml #change the [plugins."io.containerd.grpc.v1.cri"] sandbox_image = "registry.k8s.io/pause:3.9"
sudo systemctl restart containerd
service containerd status

#installing the kudedm kubelet ans kubectl

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
#apt-cache madison kubeadm
sudo apt-get install -y kubelet=1.30.0-1.1  kubeadm=1.30.0-1.1  kubectl=1.30.0-1.1
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl enable --now kubelet 

service kubelet status

control plane or master node 


sudo kubeadm init
service kubelet status
#we can view certificates in /etc/kubernetes/pki
sudo kubectl get node 
# check the status of node 
sudo  kubectl get node --kubeconfig /etc/kubernetes/admin.conf
#sudo  vim /etc/kubernetes/admin.conf
#sudo -i
#root@ip-172-31-58-21:~# export KUBECONFIG=/etc/kubernetes/admin.conf

# make the kubernetes kube congif file available to the ubuntu user 

mkdir -p ~/.kube
sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config
sudo chown $(id -u):$(id -g) ~/.kube/config

#service containerd status 
#service kubelet status

# install the cni plugin (weavenet ) plugin 
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

kubectl get pods -A -o wide

kubeadm token create --print-join-command 
# tahe the output and paste in it worker node 




wokerer plane or node 

sudo kubeadm join #output in masater node 
sudo kubeadm join 172.31.58.21:6443 --token 7ke9bs.avv4jjyysuwfe4zd --discovery-token-ca-cert-hash sha256:72a04a923290fd7c093883ae75681761fa6e21d18f52f7fd0febeb9e65176015
[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-check] Waiting for a healthy kubelet. This can take up to 4m0s
[kubelet-check] The kubelet is healthy after 1.002095173s
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.






------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# containerd ins successfully installed

#second process for installing conatier d (offical documentaion)
sudo su
sudo swapoff -a
# Download the file using wget
wget https://github.com/containerd/containerd/releases/download/v1.7.18/containerd-1.7.18-linux-amd64.tar.gz 

# Extract the archive with tar, stripping the first component of the file path
tar -xvzf containerd-1.7.18-linux-amd64.tar.gz --strip-components=1 -C /usr/local

#installing runc

cd /usr/local/sbin/
wget https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
mkdir runc
cd runc
sudo install -m 755 /usr/local/runc.amd64 /usr/local/sbin/runc

# isntlaling the CNI pugin 
sudo mkdir -p /opt/cni/bin 
sudo tar -xvzf cni-plugins-linux-amd64-v1.5.0.tgz --strip-components=1 -C /opt/cni/bin

vim /etc/containerd/config.toml #change the [plugins."io.containerd.grpc.v1.cri"] sandbox_image = "registry.k8s.io/pause:3.9"
sudo systemctl restart containerd



  sudo swapoff -a
    2  sudo modprobe overlay
    3  sudo modprobe br_netfilter
    4  #Setup required sysctl params, these persist across reboots
    5  cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables =1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

    6  # Apply sysctl params without reboot
    7  sudo sysctl --system
    8  sudo apt-get update
    9  sudo apt-get -y install containerd
   10  sudo mkdir -p /etc/containerd
   11  containerd config default | sudo tee /etc/containerd/config.toml
   12  vim /etc/containerd/config.toml
   13  sudo systemctl restart containerd
   14  service containerd status
   15  sudo systemctl restart containerd
   16  service containerd status
   17  sudo apt-get update
   18  # apt-transport-https may be a dummy package; if so, you can skip that package
   19  sudo apt-get install -y apt-transport-https ca-certificates curl gpg
   20  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   21  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   22  sudo apt-get update
   23  sudo apt-get install -y kubelet kubeadm kubectl
   24  sudo apt-mark hold kubelet kubeadm kubectl
   25  mkdir -p /usr/local/sbin/runc
   26  wget https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
   27  install -m 755 runc.amd64 /usr/local/sbin/runc
   28  mkdir -p /opt/cni/bin
   29  wget https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
   30  tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.5.0.tgz
   31  sudo systemctl enable --now kubelet
   32  service kubelet status
   33  kubeadm init
   34  sudo  kubectl get node --kubeconfig /etc/kubernetes/admin.conf
   35  mkdir -p ~/.kube
   36  sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config
   37  sudo chown $(id -u):$(id -g) ~/.kube/config
   38  kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
   39  kubectl get pods -A -o wide
   40  kubeclt get pods -n kube-system -w
   41  kubectl get pods -n kube-system -w
   42  history






















